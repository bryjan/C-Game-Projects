#include <iostream>
#include <string>
#include <iomanip>
#include <ctime>
#include <stdlib.h>
#include <windows.h>
using namespace std;
bool gameState = true;
int const h=40;//  even numbers only
int const w=60; // ^^^^^^^^^^^^^^^^^
char terChar[w][h];
int fur = 1;
int food = 15;
int energy = 15;
int score = 1;
int fGen=0;
int pGen=0;
int mGen=0;  
int seed=0;
void stats(int fur, int food, int energy, int score);
char mapGen(int const h, int const w);
void printMap(int k,HANDLE  hConsole,int const h, int const w);
char choice();
void movement(char d,int const h, int const w);
void enviroment(char, const int h, const int w);
void difficulty(int &fGen, int &pGen, int &mGen);
char iMapGen(int fGen, int pGen, int mGen,int seed);
int main()
{
	HANDLE  hConsole;
	int k;
	k=12;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	
	char dire = ' ';

	cout<<"										 THE TRAVELLER"<<endl;
	cout<<"	Travel from city to city managing your food and energy. Run out of either and you die. Rest in "<<endl;
	cout<<"the plains(_) and hunt in the forest(f). Avoid mountains(m) if you can, they will drain you of resources."<<endl;
	cout<<"You can trade your furs in for food in every new city. Good luck!"<<endl<<endl;
	cout<<"Enter seed #:  ";
	cin>>seed;
	cout<<endl;
	difficulty(fGen,pGen,mGen);
	int y = -1;
	for (int i = 0; i<h; i++)
	{
		y++;
		for (int x = 0; x<w; x++)
		{
			terChar[x][y] = iMapGen(fGen,pGen,mGen,seed);
		}
	}
	do
	{
		stats(fur, food, energy, score);
		printMap(k,hConsole,h,w);
		dire = choice();
		movement(dire,h,w);
		if (dire == 'w' || dire == 'a' || dire == 's' || dire == 'd')
			enviroment(dire,h,w);
		system ( "cls" );
		
	} while (food >= 0 && energy >= 0);
	stats(fur, food, energy, score);
	cout <<endl<<endl<< "You died" << endl;
	return 0;
}

char mapGen()
{
	int genNum = 0;
	genNum = 0 + rand() % (100-0+1);
	if (genNum<30)
		return '_';
	else if (genNum<60)
		return 'f';
	else if (genNum<99)
		return 'm';
	else
		return 'C';
}

void printMap(int k,HANDLE  hConsole,int const h, int const w)//prints characters stored in terChar except borders and center
{
	int y = -1;
	for (int i = 0; i<h; i++)
	{
		y++;
		for (int x = 0; x<w; x++)
		{
			if (x == 0 || x == w-1 || y == 0 || y == h-1)
			{
				k=15;
				SetConsoleTextAttribute(hConsole, k);//sets white
				cout << "X";
			}
			else if (x == w/2 && y == h/2)
				{
				k=12;
					SetConsoleTextAttribute(hConsole, k);//sets red
				cout << "A";
				}
			else
				if(terChar[x][y]=='_')
				{
					k=14;
					SetConsoleTextAttribute(hConsole, k);//sets yellow
					cout << terChar[x][y];
				}
				else if(terChar[x][y]=='f')
				{
					k=10;
					SetConsoleTextAttribute(hConsole, k);//sets green
					cout << terChar[x][y];
				}
				else if(terChar[x][y]=='m')
				{
					k=5;
					SetConsoleTextAttribute(hConsole, k);//sets purple
					cout << terChar[x][y];
				}
				else
				{
					k=11;
					SetConsoleTextAttribute(hConsole, k);//sets blue
					cout << terChar[x][y];
				}
		}
		cout << endl;
	}
}

char choice()//key choicw
{
	char l;
	cout << endl << endl << " use 'wasd' to move and any other key to wait/hunt: ";
	cin >> l;
	return l;
}

void movement(char d,int const h, int const w)
{
	if (d == 'w')
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[w-1 - x][h-1 - y] = terChar[w-1 - x][h-2 - y];
			}
		}
		for (int x = 0; x<w; x++)
		{
			terChar[x][h] = mapGen();//gens top border
		}
	}
	else if (d == 's')
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[x][y] = terChar[x][y + 1];
			}
		}
		for (int x = 0; x<w; x++)
		{
			terChar[x][0] = mapGen();//gens bottom border
		}
	}
	else if (d == 'd')
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[x][y] = terChar[x + 1][y];
			}
			for (int i = 0; i<h; i++)
			{
				terChar[w][i] = mapGen();//gens right border
			}
		}
		
	}
	else if (d == 'a')
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[w-1-x][h-1-y] = terChar[w-2 - x][h-1 - y];
			}
		}
		for (int i = 0; i<h; i++)
		{
			terChar[0][i] = mapGen();//gens left border
		}
	}
	else // if waits or hunts
	{
		if (terChar[w/2][h/2] == 'f')//hunting in forests
		{
			energy -= 3;
			food += -1 + rand()% (4 -1 + 1);
			fur += 0 + rand()% (3 -0 + 1);
		}
		else if (terChar[w/2][h/2] == '_')//waiting in plains
		{
			energy += 1 + rand()% (5 -0 + 1);
			food -= 2;

		}
		else if(terChar[w/2][h/2] == 'm')
		{
			food -= 3;
			fur+=0 + rand()% (2 -0 + 1);//waiting & hunting in mountains
		}
	}
}

void enviroment(char, int const h, int const w)
{
	if (terChar[w/2][h/2] == 'C') //reaching a city
	{
		score++;
		energy = 15;
		food += fur;
		fur = 0;
		terChar[w/2][h/2] = 'c';
	}
	else if (terChar[w/2][h/2] == '_')//moving into plains
	{
		energy -= 1;
		food -= 1;
	}
	else if (terChar[w/2][h/2] == 'f')//moving into forest
	{
		energy -= 2;
		food += -1 + rand()% (3 - 1 + 1);
	}
	else if (terChar[w/2][h/2] == 'c')//moving into already visited city
	{
	}
	else// moving into mountains
	{
		energy -= 4;
		food -= 3;
	}
}

void stats(int fur, int food, int energy, int score)
{
	cout << "fur: " << fur << " food: " << food << " energy: " << energy << endl;
	cout << "score: " << score << endl;
}

void difficulty(int &fGen, int &pGen, int &mGen)
{
	int dif=0;
	cout<<"Choose difficulty: 1=easy 2=hard: ";
	cin>>dif;
	if(dif==2)
	{
		fGen=60;
		pGen=30;
		mGen=99;
	}
	else
	{
		fGen=80;
		pGen=50;
		mGen=98;
	}
}

char iMapGen(int fGen, int pGen, int mGen,int seed)
{
	int genNum = 0;
	genNum = 0 + rand()*seed % (100-0+1);
	if (genNum<pGen)
		return '_';
	else if (genNum<fGen)
		return 'f';
	else if (genNum<mGen)
		return 'm';
	else
		return 'C';
}
