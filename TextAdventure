#include "stdafx.h"
#include <iostream>
#include <string>
#include <iomanip>
#include <ctime>
#include <stdlib.h>
#include <windows.h>
using namespace std;
bool gameState = true;
int const h = 30;//  even numbers only
int const w = 60; // ^^^^^^^^^^^^^^^^^
char terChar[w][h];
int fur = 1;
int food = 15;
int energy = 15;
int score = 1;
int pScore = 1;
int fGen = 0;
int pGen = 0;
int mGen = 0;
int seed = 0;
int yes = 1;
int eCap = 15;
int fCap = 20;
int hSkill = 1;
int cSkill = 1;
int lvl = 1;
int n = -3;
int hscore = 1;

char dire = ' ';

void lvlup(int &eCap, int &fCap, int &hSkill, int &cSkill, int score, int &lvl, int &n);
void stats(int fur, int food, int energy, int score, int eCap, int fCap, int hSkill, int cSkill, int lvl, int hscore);
char mapGen(int const h, int const w);
void printMap(int k, HANDLE  hConsole, int const h, int const w);
char choice();
void movement(char dire, int const h, int const w, int eCap, int fCap, int hSkill, int cSkill, int &fur, int &food, int &energy);
void enviroment(char dire, const int h, const int w, int eCap, int fCap, int hSkill, int cSkill, int &fur, int &food, int &energy, int &pScore);
void difficulty(int &fGen, int &pGen, int &mGen);
char iMapGen(int fGen, int pGen, int mGen, int seed);
int main()
{
	HANDLE  hConsole;
	int k;
	k = 12;
	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);//for color(dont really understand it)
	do
	{

		fur = 1;
		food = 15;
		energy = 15;
		score = 1;
		pScore = 1;
		fGen = 0;
		pGen = 0;
		mGen = 0;
		seed = 0;
		yes = 1;
		eCap = 15;
		fCap = 20;
		hSkill = 1;
		cSkill = 1;
		lvl = 1;//if any of the stats are set to 0 they become random junk randomly in runtime.
		n = -3;//to space out leveling after level 10

		cout << "				 THE TRAVELLER" << endl;
		cout << "	Travel from city to city managing your food and energy. Run out of either and you die." << endl;
		cout << " Rest in the plains(_) and hunt in the forest(f). Avoid mountains(m) if you can, they will drain" << endl;
		cout << " you of resources. You can trade your furs in for food in every new city. Good luck!" << endl << endl;
		cout << " Enter seed #:  "; //intro
		cin >> seed;//seed for map gen
		cout << endl;

		difficulty(fGen, pGen, mGen);//asks for difficulty and changes map gen accordingly
		system("cls");//clears screen
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[x][y] = iMapGen(fGen, pGen, mGen, seed);
			}//assigns each element a char.
		}
		do
		{
			if (pScore<score)//to see if your score increased, and then check to see if you leveled up, and then level up
			{
				pScore = score;
				lvlup(eCap, fCap, hSkill, cSkill, score, lvl, n);
			}
			stats(fur, food, energy, score, eCap, fCap, hSkill, cSkill, lvl, hscore);//prints stats
			printMap(k, hConsole, h, w);//prints map
			dire = choice();//asks for choice
			movement(dire, h, w, eCap, fCap, hSkill, cSkill, fur, food, energy);//regenerates map edges, moves elements to proper adjacent subscripts, process what happens when you wait
			enviroment(dire, h, w, eCap, fCap, hSkill, cSkill, fur, food, energy, pScore);//applies the affect of moving into a certain enviroment, and sets a new city to an old city.
			system("cls");//clears screen adds percieved movement

		} while (food >= 0 && energy >= 0); //if not dead, loop(loop is life)
		stats(fur, food, energy, score, eCap, fCap, hSkill, cSkill, lvl, hscore);//prints ending stats
		if (score>hscore)
			hscore = score;//adds highscore
		cout << endl << endl << "You died" << endl;
		cout << "play again? 1 for yes:  ";
		cin >> yes;

	} while (yes == 1);//asks for replay
	return 0;
}

char mapGen()
{
	int genNum = 0;
	genNum = 0 + rand() % (100 - 0 + 1);
	if (genNum<20)
		return '_';
	else if (genNum<45)
		return 'f';
	else if (genNum<99)
		return 'm';
	else
		return 'C';
}
//generates hard map on edges
void printMap(int k, HANDLE  hConsole, int const h, int const w)
{
	int y = -1;
	for (int i = 0; i<h; i++)
	{
		y++;
		for (int x = 0; x<w; x++)
		{
			if (x == 0 || x == w - 1 || y == 0 || y == h - 1)
			{
				k = 15;
				SetConsoleTextAttribute(hConsole, k);//sets white
				cout << "X";
			}
			else if (x == w / 2 && y == h / 2)
			{
				k = 12;
				SetConsoleTextAttribute(hConsole, k);//sets red
				cout << "A";
			}
			else
			if (terChar[x][y] == '_')
			{
				k = 14;
				SetConsoleTextAttribute(hConsole, k);//sets yellow
				cout << terChar[x][y];
			}
			else if (terChar[x][y] == 'f')
			{
				k = 10;
				SetConsoleTextAttribute(hConsole, k);//sets green
				cout << terChar[x][y];
			}
			else if (terChar[x][y] == 'm')
			{
				k = 5;
				SetConsoleTextAttribute(hConsole, k);//sets purple
				cout << terChar[x][y];
			}
			else
			{
				k = 11;
				SetConsoleTextAttribute(hConsole, k);//sets blue
				cout << terChar[x][y];
			}
		}
		cout << endl;
	}
}
//prints characters stored in terChar except borders and center
char choice()
{
	char l;
	cout << endl << endl << " use 'wasd' to move and any other key to wait/hunt: ";
	cin >> l;
	return l;
}
//key choice
void movement(char d, int const h, int const w, int eCap, int fCap, int hSkill, int cSkill, int &fur, int &food, int &energy)
{

	if (d == 'w')//moving up
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[w - 1 - x][h - 1 - y] = terChar[w - 1 - x][h - 2 - y];
			}
		}
		for (int x = 0; x<w; x++)
		{
			terChar[x][h] = mapGen();//gens top border
		}
	}
	else if (d == 's')//moving down
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[x][y] = terChar[x][y + 1];
			}
		}
		for (int x = 0; x<w; x++)
		{
			terChar[x][0] = mapGen();//gens bottom border
		}
	}
	else if (d == 'd')//moving right
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[x][y] = terChar[x + 1][y];
			}
			for (int i = 0; i<h; i++)
			{
				terChar[w][i] = mapGen();//gens right border
			}
		}

	}
	else if (d == 'a')//moving left
	{
		int y = -1;
		for (int i = 0; i<h; i++)
		{
			y++;
			for (int x = 0; x<w; x++)
			{
				terChar[w - 1 - x][h - 1 - y] = terChar[w - 2 - x][h - 1 - y];
			}
		}
		for (int i = 0; i<h; i++)
		{
			terChar[0][i] = mapGen();//gens left border
		}
	}
}
//regenerates map edges, moves elements to proper adjacent subscripts, 
void enviroment(char dire, int const h, int const w, int eCap, int fCap, int hSkill, int cSkill, int &fur, int &food, int &energy, int &pScore)
{
	if (dire == 'w' || dire == 'a' || dire == 's' || dire == 'd')//if you did move
	{
		if (terChar[w / 2][h / 2] == 'C') //reaching a city
		{
			score++;
			energy = eCap;
			food += fur;
			fur = 0;
			terChar[w / 2][h / 2] = 'c';
		}
		else if (terChar[w / 2][h / 2] == '_')//moving into plains
		{
			energy -= 1;
			food -= 1;
		}
		else if (terChar[w / 2][h / 2] == 'f')//moving into forest
		{
			energy -= 2;
			if (food + fur < fCap)
			{
				if (hSkill - 1 >= 2)
				{
					if (hSkill - 1 % 2 != 0)
					{
						hSkill -= 1;
					}
				}
				food += (hSkill / 2);
				food += 0 + rand() % (2 - 0 + 1);
			}
		}
		else if (terChar[w / 2][h / 2] == 'c')//moving into already visited city
		{
		}
		else// moving into mountains
		{
			energy -= 4;
			food -= 3;
		}
	}
	else
	{
		if (terChar[w / 2][h / 2] == 'f')//hunting in forests
		{
			energy -= 3;
			if (food + fur<fCap)
				food += 0 + (rand() % (4 - 0 + 1)) + hSkill - 1;
			fur += 0 + (rand() % (2 - 0 + 1)) + hSkill - 1;
		}
		else if (terChar[w / 2][h / 2] == '_')//waiting in plains
		{

			if (energy <= eCap)
				energy += (1 + rand() % (5 - 1 + 1) + cSkill - 1);
			food -= 2;

		}
		else if (terChar[w / 2][h / 2] == 'm')
		{
			food -= 3;
			if (fur + food<fCap)
				fur += (0 + rand() % (2 - 0 + 1)) + hSkill - 1;//waiting & hunting in mountains
		}
	}

}
//applies the affect of moving into a certain enviroment, processes what happens when you wait and sets a new city to an old city.
void stats(int fur, int food, int energy, int score, int eCap, int fCap, int hSkill, int cSkill, int lvl, int hscore)
{
	if (hscore != 0)
		cout << endl << "highscore: " << hscore << endl;
	cout << "Level: " << lvl << endl << "Carry weight: " << fCap << "  Max energy: " << eCap << "  Hunting skill: " << hSkill << "  Camp efficientcy: " << cSkill << endl << endl;
	cout << "fur: " << fur << " food: " << food << " energy: " << energy << endl;
	cout << "score: " << score << endl;
}
//prints stats
void difficulty(int &fGen, int &pGen, int &mGen)
{
	int dif = 0;
	cout << "Choose difficulty: 1=easy 2=hard: ";
	cin >> dif;
	if (dif == 2)
	{
		fGen = 45;
		pGen = 20;
		mGen = 98;
	}
	else
	{
		fGen = 80;
		pGen = 50;
		mGen = 98;
	}
}
//asks difficulty and changes map gen
char iMapGen(int fGen, int pGen, int mGen, int seed)
{
	int genNum = 0;
	genNum = 0 + rand()*seed % (100 - 0 + 1);
	if (genNum<pGen)
		return '_';
	else if (genNum<fGen)
		return 'f';
	else if (genNum<mGen)
		return 'm';
	else
		return 'C';
}//initial map gen w/ seed and set difficulty
//initial map gen w/ seed and difficulty
void lvlup(int &eCap, int &fCap, int &hSkill, int &cSkill, int score, int &lvl, int &n)
{
	char lvlChoice = ' ';
	if (score == 2 || score == 4 || score == 6 || score == 8 || score == 10 || score == 12 || score == 14 || score == 16 || score == 18 || score == 20 || score >= n&&score>20)
	if (terChar[w / 2][h / 2] == 'C')
	{
		cout << "Carry weight: " << fCap << "  Max energy: " << eCap << "  Hunting skill: " << hSkill + 1 << "  Camp efficientcy: " << cSkill + 1 << endl << endl;

		cout << "You've grown wiser and stronger with each mile. How have you grown?" << endl;
		cout << " 'I can carry more.' (c) " << endl;
		cout << " 'I can walk futher in a day.' (e)" << endl;
		cout << " 'I've became a better hunter and learned of new plants to eat.'  (h)" << endl;
		cout << " 'I've learned to set up my camps quickly and efficiently, my camp is becoming home.'  (r)" << endl;
		cin >> lvlChoice;
		if (lvlChoice == 'c')
			fCap += 3;
		else if (lvlChoice == 'e')
			eCap += 3;
		else if (lvlChoice == 'h')
			hSkill++;
		else
			cSkill++;

		lvl++;
		n += 3;
	}
}
